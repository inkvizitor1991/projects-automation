import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)

FIRST, SECOND = range(2)

ONE, TWO, THREE, FOUR, TIME = range(5)


def start(update, _):
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ `/start`."""
    user = update.message.from_user
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞—á–∞–ª —Ä–∞–∑–≥–æ–≤–æ—Ä", user.first_name)
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ  –î–∞", callback_data=str(ONE)),
            InlineKeyboardButton("‚ùå  –ù–µ—Ç", callback_data=str(THREE)),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        text=f'–ü—Ä–∏–≤–µ—Çüëã {user.first_name}. –Ø –±–æ—Ç "–î–µ–≤–º–∏". –ú–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ?',
        reply_markup=reply_markup
    )
    return FIRST


def start_over(update, _):
    query = update.callback_query
    query.answer()
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ  –î–∞", callback_data=str(ONE)),
            InlineKeyboardButton("‚ùå  –ù–µ—Ç", callback_data=str(THREE)),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        text='–ü—Ä–∏–≤–µ—Çüëã. –Ø –±–æ—Ç  "–î–µ–≤–º–∏". –ú–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ?',
        reply_markup=reply_markup
    )
    return FIRST


def one(update, _):
    """–ü–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    query.answer()
    keyboard = [
        [InlineKeyboardButton("–õ—é–±–æ–µ –≤—Ä–µ–º—è ( —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ )",
                              callback_data='time-–õ—é–±–æ–µ –≤—Ä–µ–º—è')],
        [
            InlineKeyboardButton("–° 18:00 –¥–æ 19:00",
                                 callback_data='time-18:19'),
            InlineKeyboardButton("–° 19:00 –¥–æ 20:00",
                                 callback_data='time-19:20'),
        ],
        # [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Å–æ–∑–≤–æ–Ω–∞( –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è )",
        #                                 callback_data=str(FOUR))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        text="–Ø —Ä–∞–¥ —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏ üòÅ. –í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–æ–∑–≤–æ–Ω–∞",
        reply_markup=reply_markup
    )
    return FIRST


def change_query_handler(update, _):
    query = update.callback_query
    query.answer()
    _, game_state = query.data.split("-")
    if game_state in ["–õ—é–±–æ–µ –≤—Ä–µ–º—è", "18:19", "19:20"]:
        text = '–û—Ç–ª–∏—á–Ω–æ üëå, –æ—Å—Ç–∞–≤–∞–π—Å—è –Ω–∞ —Å–≤—è–∑–∏. \n' \
               '–ó–∞ –¥–µ–Ω—å –¥–æ –ø—Ä–æ–µ–∫—Ç–∞ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –≤—Å—é –∏–Ω—Ñ—É –æ –ø—Ä–æ–µ–∫—Ç–µ  –∏ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø–µ üòé'
        query.edit_message_text(text)
        return SECOND


def two(update, _):
    query = update.callback_query
    query.answer()
    keyboard = [
        [
            InlineKeyboardButton("1", callback_data=str(ONE)),
            InlineKeyboardButton("3", callback_data=str(THREE)),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        text="–í—Ç–æ—Ä–æ–π CallbackQueryHandler", reply_markup=reply_markup
    )
    return FIRST


def three(update, _):
    query = update.callback_query
    query.answer()
    keyboard = [
        [
            InlineKeyboardButton("‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=str(ONE)),
            InlineKeyboardButton("–Ø –ø—Ä–∞–≤–¥–∞ –Ω–µ –º–æ–≥—É üòû", callback_data=str(TWO)),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        text="–ü—Ä–æ–µ–∫—Ç—ã –æ—á–µ–Ω—å –ø–æ–º–æ–≥–∞—é—Ç –≤ –æ–±—É—á–µ–Ω–∏–∏", reply_markup=reply_markup
    )
    return SECOND


def four(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–° 18:00 –¥–æ 18:30", callback_data=str(TIME)),
            InlineKeyboardButton("–° 18:30 –¥–æ 19:00", callback_data=str(TIME)),
        ],
        [
            InlineKeyboardButton("–° 19:00 –¥–æ 19:30", callback_data=str(TIME)),
            InlineKeyboardButton("–° 19:30 –¥–æ 20:00", callback_data=str(TIME)),
        ],
        [
            InlineKeyboardButton("‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=str(ONE))
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–æ–∑–≤–æ–Ω–∞", reply_markup=reply_markup
    )
    return FIRST


def time(update, _):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    query.answer()
    text = '–û—Ç–ª–∏—á–Ω–æ üëå, –æ—Å—Ç–∞–≤–∞–π—Å—è –Ω–∞ —Å–≤—è–∑–∏. –ó–∞ –¥–µ–Ω—å –¥–æ –ø—Ä–æ–µ–∫—Ç–∞ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –≤—Å—é –∏–Ω—Ñ—É –æ –ø—Ä–æ–µ–∫—Ç–µ  –∏ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø–µ üòé'
    query.edit_message_text(text=text)
    return ConversationHandler.END


def end(update, _):
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="–û—á–µ–Ω—å –∂–∞–ª—å, –Ω–∞–º –±—É–¥–µ—Ç —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞—Ç—å üò¢")
    return ConversationHandler.END


if __name__ == '__main__':
    updater = Updater("5095913199:AAF3qSCedLOGI8dC4E_kraitqBOh2Khln2E")
    dispatcher = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            FIRST: [
                CallbackQueryHandler(change_query_handler, pattern='^time-'),
                CallbackQueryHandler(one, pattern='^' + str(ONE) + '$'),
                CallbackQueryHandler(two, pattern='^' + str(TWO) + '$'),
                CallbackQueryHandler(three, pattern='^' + str(THREE) + '$'),
                CallbackQueryHandler(four, pattern='^' + str(FOUR) + '$'),
                CallbackQueryHandler(time, pattern='^' + str(TIME) + '$'),
            ],
            SECOND: [
                CallbackQueryHandler(start_over, pattern='^' + str(ONE) + '$'),
                CallbackQueryHandler(end, pattern='^' + str(TWO) + '$'),
            ],
        },
        fallbacks=[CommandHandler('start', start)],
    )

    dispatcher.add_handler(conv_handler)

    updater.start_polling()
    updater.idle()
